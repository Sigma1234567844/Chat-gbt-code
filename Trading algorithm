import os
import subprocess
import pandas as pd
import numpy as np
import requests
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from bs4 import BeautifulSoup
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import joblib
import json
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime
import openpyxl
import unittest

# Install required Python packages
def install_packages():
    packages = [
        'pandas', 'numpy', 'requests', 'scikit-learn',
        'tensorflow', 'beautifulsoup4', 'joblib', 'openpyxl'
    ]
    for package in packages:
        subprocess.check_call([os.sys.executable, "-m", "pip", "install", package])

# Train and save scam detection model
def setup_scam_detection_model():
    texts = ["legitimate site content", "scam site content"]
    labels = [0, 1]  # 0 for legitimate, 1 for scam

    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(texts)
    model = LogisticRegression()
    model.fit(X, labels)

    joblib.dump(model, 'scam_model.pkl')
    joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')

# Fetch historical data
def fetch_historical_data(product_id, granularity='86400'):
    url = f'https://api.pro.coinbase.com/products/{product_id}/candles?granularity={granularity}'
    response = requests.get(url)
    data = response.json()
    with open(f'{product_id}_historical_data.json', 'w') as f:
        json.dump(data, f)

# Load and preprocess data
def preprocess_data(filename):
    data = pd.read_json(filename)
    data.columns = ['time', 'low', 'high', 'open', 'close', 'volume']
    data['price_change'] = data['close'].pct_change()
    data['label'] = np.where(data['price_change'] > 0, 1, 0)
    data = data.dropna()
    return data

# Fetch web data
def fetch_web_data(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, 'html.parser')
    return soup

# Sentiment analysis from headlines
def analyze_sentiment(headlines):
    positive_words = ['up', 'increase', 'rise', 'bull']
    negative_words = ['down', 'decrease', 'fall', 'bear']
    
    score = 0
    for headline in headlines:
        if any(word in headline.lower() for word in positive_words):
            score += 1
        elif any(word in headline.lower() for word in negative_words):
            score -= 1
    return score

# Scam detection model
def load_scam_model():
    return joblib.load('scam_model.pkl')

def is_scam(url, model, vectorizer):
    response = requests.get(url)
    content = response.text
    features = vectorizer.transform([content])
    prediction = model.predict(features)
    return prediction[0] == 1

# Placeholder for mining logic
def mine_cryptocurrency(coin):
    if coin == 'bitcoin':
        print("Mining Bitcoin...")
    elif coin == 'monero':
        print("Mining Monero...")
    return 100  # Example mined amount

# Placeholder for selling cryptocurrency
def sell_cryptocurrency(coin, amount):
    print(f"Selling {amount} of {coin}")
    return amount * 50  # Example sale price

# Placeholder for investing in index fund
def invest_in_index_fund(amount):
    print(f"Investing {amount} in 2-year index fund")

# Placeholder for transferring to bank
def transfer_to_bank(amount):
    print(f"Transferring {amount} to bank account")

# Placeholder for buying gold
def buy_gold(amount):
    print(f"Buying {amount} worth of gold")

# Placeholder for buying silver
def buy_silver(amount):
    print(f"Buying {amount} worth of silver")

# Placeholder for buying diamonds
def buy_diamonds(amount):
    print(f"Buying {amount} worth of diamonds")

# Placeholder for investing in oil companies
def invest_in_oil(amount):
    print(f"Investing {amount} in oil companies")

# Placeholder for buying emeralds
def buy_emeralds(amount):
    print(f"Buying {amount} worth of emeralds")

# Placeholder for investing in S&P 500
def invest_in_sp500(amount):
    print(f"Investing {amount} in S&P 500")

# Placeholder for investing in tech companies
def invest_in_tech_companies(amount):
    print(f"Investing {amount} in tech companies")

# Placeholder for investing in OpenAI and Nvidia
def invest_in_openai_nvidia(amount):
    print(f"Investing {amount} in OpenAI and Nvidia")

# Placeholder for investing in Apple
def invest_in_apple(amount):
    print(f"Investing {amount} in Apple")

# Send monthly report via email
def send_monthly_report(index_fund_performance):
    sender_email = "youremail@example.com"
    receiver_email = "receiver@example.com"
    password = "yourpassword"

    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = receiver_email
    msg['Subject'] = "Monthly Index Fund Performance Report"

    body = f"Monthly Report on Index Fund Performance:\n\n{index_fund_performance}"
    msg.attach(MIMEText(body, 'plain'))

    try:
        server = smtplib.SMTP('smtp.example.com', 587)
        server.starttls()
        server.login(sender_email, password)
        text = msg.as_string()
        server.sendmail(sender_email, receiver_email, text)
        server.quit()
        print("Monthly report sent successfully")
    except Exception as e:
        print(f"Failed to send email: {e}")

# Create investment spreadsheet
def create_investment_spreadsheet(profit, allocation):
    df = pd.DataFrame(list(allocation.items()), columns=['Investment', 'Amount'])
    df.loc[len(df.index)] = ['Total Profit', profit]
    df.to_excel('investment_allocation.xlsx', index=False)

# Manage portfolio and trade
def manage_and_trade(product_id, btc_balance, xmr_balance, profit_threshold=100):
    fetch_historical_data(product_id)
    data = preprocess_data(f'{product_id}_historical_data.json')

    # Feature engineering
    features = data[['open', 'high', 'low', 'close', 'volume']]
    labels = data['label']

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)

    # Random Forest Classifier
    rf = RandomForestClassifier(n_estimators=100)
    rf.fit(X_train, y_train)
    rf_predictions = rf.predict(X_test)

    # LSTM for time series prediction
    model = Sequential()
    model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
    model.add(LSTM(50))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    X_train_lstm = np.reshape(X_train.values, (X_train.shape[0], X_train.shape[1], 1))
    X_test_lstm = np.reshape(X_test.values, (X_test.shape[0], X_test.shape[1], 1))

    model.fit(X_train_lstm, y_train, epochs=10, batch_size=32)
    lstm_predictions = model.predict(X_test_lstm)

    # Fetch and analyze web data
    url = 'https://www.example.com/crypto-news'
    soup = fetch_web_data(url)
    headlines = [h.text for h in soup.find_all('h2', class_='headline')]
    sentiment_score = analyze_sentiment(headlines)

    # Scam detection
    scam_model = load_scam_model()
    vectorizer = joblib.load('tfidf_vectorizer.pkl')
    if is_scam(url, scam_model, vectorizer):
        print("Scam detected! Skipping this website.")
        return btc_balance * 0.2, xmr_balance * 0.2

    # Portfolio management
    btc_trade_amount = btc_balance * 0.8
    xmr_trade_amount = xmr_balance * 0.8

    btc_hold_amount = btc_balance * 0.2
    xmr_hold_amount = xmr_balance * 0.2

    # Simulate trade decision
    profit = 0
    for rf_p, lstm_p in zip(rf_predictions, lstm_predictions):
        if rf_p == 1 and lstm_p > 0.5 and sentiment_score > 0:
            print(f'Trade Decision: Buy BTC with {btc_trade_amount}')
            print(f'Trade Decision: Buy XMR with {xmr_trade_amount}')
            btc_balance -= btc_trade_amount
            xmr_balance -= xmr_trade_amount
            profit += btc_trade_amount * 50 + xmr_trade_amount * 50  # Simulated profit calculation
        else:
            print('Trade Decision: Hold')
